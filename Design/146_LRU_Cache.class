/**
 * 题目描述：
	Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
	
	get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
	put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.
	
	Follow up:
	Could you do both operations in O(1) time complexity?
	
	解题思路：
		使用双端队列来保存缓存，最近刚被使用过的放在队头，使用map来保存队列的每一个指针
		(1)put操作：
				缓存中已经存在，删除中该队列节点，插入到队头，更新节点的value值，不对map操作
				若不存在，插入到队头，若队列超长，删除队尾节点，移除在map中的映射
		(2)get操作：
				用map查找，若存在则，在队列中原位置删除，插入到队头，不对map操作
				否则返回-1
 */

import java.util.HashMap;
import java.util.Map;

public class LRUCache {

	class Node{
		int key;
		int value;
		Node pre;
		Node next;
		
		public Node(int key, int value){
			this.key = key;
			this.value = value;
		}
	}
	
	Map<Integer, Node> map = null;
	Node head = null;
	Node tail = null;
	
	int capacity;
	int size;
	
    public LRUCache(int capacity) {
        map = new HashMap<>();
        head = new Node(0, 0);
        tail = new Node(0, 0);
        
        head.next = tail;
        head.pre = null;
        tail.pre = head;
        tail.next = null;        
        
        this.capacity = capacity;
        this.size = 0;
    }
    
    public int get(int key) {    	
    	if(map.containsKey(key)){
    		Node p = map.get(key);
    		deleteNode(p);
    		addNodeToHead(p);
    		return p.value;
    	}
        return -1;
    }
    
    public void put(int key, int value) {
    	if(map.containsKey(key)){
    		Node p = map.get(key);
    		p.value = value;
    		deleteNode(p);
    		addNodeToHead(p);
    	}
    	else{
        	Node p = new Node(key, value);
            addNodeToHead(p);
            map.put(key, p);
            size++;
            if(size > capacity){
            	map.remove(tail.pre.key);
            	deleteNode(tail.pre);
            	size--;
            }
    	}
    }
    
    private void addNodeToHead(Node p){
    	p.next = head.next;
    	head.next.pre = p;
    	head.next = p;
    	p.pre = head;
    }
	
    private void deleteNode(Node p){
    	p.next.pre = p.pre;
    	p.pre.next = p.next;
    }
    
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */